(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.6.0
var log;
log = require('utils').log;
document.addEventListener('DOMContentLoaded', function(){
  return log("ToyNet::init - ok");
});



},{"utils":2}],2:[function(require,module,exports){
// Generated by LiveScript 1.6.0
var id, log, warn, invoke, wrap, pad, toArray, unlines, zip, Q, QSA, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(this, arguments);
  return arguments[0];
};
out$.warn = warn = function(){
  console.warn.apply(this, arguments);
  return arguments[0];
};
out$.invoke = invoke = function(λ){
  var args, res$, i$, to$;
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  args = res$;
  return λ.apply(null, args);
};
out$.wrap = wrap = curry$(function(a, b, n){
  if (n < a) {
    return b;
  } else if (n > b) {
    return a;
  } else {
    return n;
  }
});
out$.pad = pad = curry$(function(l, n){
  if (n.length < l) {
    return (repeatArray$(['0'], l - n.length)).join('') + n;
  } else {
    return n;
  }
});
out$.toArray = toArray = function(alo){
  return Array.prototype.slice.apply(alo);
};
out$.unlines = unlines = function(it){
  return it.join("\n");
};
out$.zip = zip = function(as, bs){
  var out, i$, len$, ix, a, b;
  out = [];
  for (i$ = 0, len$ = as.length; i$ < len$; ++i$) {
    ix = i$;
    a = as[i$];
    b = bs[ix];
    out.push(a);
    out.push(b);
  }
  return out;
};
out$.Q = Q = function(sel, scope){
  scope == null && (scope = document);
  if (typeof sel !== 'string') {
    return sel;
  } else {
    return scope.querySelector(sel);
  }
};
out$.QSA = QSA = function(sel, scope){
  scope == null && (scope = document);
  if (typeof sel !== 'string') {
    return sel;
  } else {
    return toArray(scope.querySelectorAll(sel));
  }
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}



},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXgubHMiLCJzcmMvdXRpbHMubHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIEdlbmVyYXRlZCBieSBMaXZlU2NyaXB0IDEuNi4wXG52YXIgbG9nO1xubG9nID0gcmVxdWlyZSgndXRpbHMnKS5sb2c7XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGxvZyhcIlRveU5ldDo6aW5pdCAtIG9rXCIpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXh6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlIwVXNSMEZCVFN4RFFVRkJMRU5CUVVFc1EwRkJSU3hQUVVGV0xFTkJRV3RDTEU5QlFVRXNRMEZCYkVJc1EwRkJRVHRCUVUxQkxGRkJRVkVzUTBGQlF5eHBRa0ZCYlVJc2IwSkJRVzFDTEZGQlFVRXNRMEZCUVR0VFFVVTNReXhKUVVGMVFpeHRRa0ZCUVR0RFFVWkhJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hYMD1cblxuIiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS42LjBcbnZhciBpZCwgbG9nLCB3YXJuLCBpbnZva2UsIHdyYXAsIHBhZCwgdG9BcnJheSwgdW5saW5lcywgemlwLCBRLCBRU0EsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5vdXQkLmlkID0gaWQgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdDtcbn07XG5vdXQkLmxvZyA9IGxvZyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUubG9nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBhcmd1bWVudHNbMF07XG59O1xub3V0JC53YXJuID0gd2FybiA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUud2Fybi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICByZXR1cm4gYXJndW1lbnRzWzBdO1xufTtcbm91dCQuaW52b2tlID0gaW52b2tlID0gZnVuY3Rpb24ozrspe1xuICB2YXIgYXJncywgcmVzJCwgaSQsIHRvJDtcbiAgcmVzJCA9IFtdO1xuICBmb3IgKGkkID0gMSwgdG8kID0gYXJndW1lbnRzLmxlbmd0aDsgaSQgPCB0byQ7ICsraSQpIHtcbiAgICByZXMkLnB1c2goYXJndW1lbnRzW2kkXSk7XG4gIH1cbiAgYXJncyA9IHJlcyQ7XG4gIHJldHVybiDOuy5hcHBseShudWxsLCBhcmdzKTtcbn07XG5vdXQkLndyYXAgPSB3cmFwID0gY3VycnkkKGZ1bmN0aW9uKGEsIGIsIG4pe1xuICBpZiAobiA8IGEpIHtcbiAgICByZXR1cm4gYjtcbiAgfSBlbHNlIGlmIChuID4gYikge1xuICAgIHJldHVybiBhO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuO1xuICB9XG59KTtcbm91dCQucGFkID0gcGFkID0gY3VycnkkKGZ1bmN0aW9uKGwsIG4pe1xuICBpZiAobi5sZW5ndGggPCBsKSB7XG4gICAgcmV0dXJuIChyZXBlYXRBcnJheSQoWycwJ10sIGwgLSBuLmxlbmd0aCkpLmpvaW4oJycpICsgbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbjtcbiAgfVxufSk7XG5vdXQkLnRvQXJyYXkgPSB0b0FycmF5ID0gZnVuY3Rpb24oYWxvKXtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhbG8pO1xufTtcbm91dCQudW5saW5lcyA9IHVubGluZXMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdC5qb2luKFwiXFxuXCIpO1xufTtcbm91dCQuemlwID0gemlwID0gZnVuY3Rpb24oYXMsIGJzKXtcbiAgdmFyIG91dCwgaSQsIGxlbiQsIGl4LCBhLCBiO1xuICBvdXQgPSBbXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSBhcy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGl4ID0gaSQ7XG4gICAgYSA9IGFzW2kkXTtcbiAgICBiID0gYnNbaXhdO1xuICAgIG91dC5wdXNoKGEpO1xuICAgIG91dC5wdXNoKGIpO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xub3V0JC5RID0gUSA9IGZ1bmN0aW9uKHNlbCwgc2NvcGUpe1xuICBzY29wZSA9PSBudWxsICYmIChzY29wZSA9IGRvY3VtZW50KTtcbiAgaWYgKHR5cGVvZiBzZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHNlbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2NvcGUucXVlcnlTZWxlY3RvcihzZWwpO1xuICB9XG59O1xub3V0JC5RU0EgPSBRU0EgPSBmdW5jdGlvbihzZWwsIHNjb3BlKXtcbiAgc2NvcGUgPT0gbnVsbCAmJiAoc2NvcGUgPSBkb2N1bWVudCk7XG4gIGlmICh0eXBlb2Ygc2VsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzZWw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkoc2NvcGUucXVlcnlTZWxlY3RvckFsbChzZWwpKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGN1cnJ5JChmLCBib3VuZCl7XG4gIHZhciBjb250ZXh0LFxuICBfY3VycnkgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgcmV0dXJuIGYubGVuZ3RoID4gMSA/IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgcGFyYW1zID0gYXJncyA/IGFyZ3MuY29uY2F0KCkgOiBbXTtcbiAgICAgIGNvbnRleHQgPSBib3VuZCA/IGNvbnRleHQgfHwgdGhpcyA6IHRoaXM7XG4gICAgICByZXR1cm4gcGFyYW1zLnB1c2guYXBwbHkocGFyYW1zLCBhcmd1bWVudHMpIDxcbiAgICAgICAgICBmLmxlbmd0aCAmJiBhcmd1bWVudHMubGVuZ3RoID9cbiAgICAgICAgX2N1cnJ5LmNhbGwoY29udGV4dCwgcGFyYW1zKSA6IGYuYXBwbHkoY29udGV4dCwgcGFyYW1zKTtcbiAgICB9IDogZjtcbiAgfTtcbiAgcmV0dXJuIF9jdXJyeSgpO1xufVxuZnVuY3Rpb24gcmVwZWF0QXJyYXkkKGFyciwgbil7XG4gIGZvciAodmFyIHIgPSBbXTsgbiA+IDA7IChuID4+PSAxKSAmJiAoYXJyID0gYXJyLmNvbmNhdChhcnIpKSlcbiAgICBpZiAobiAmIDEpIHIucHVzaC5hcHBseShyLCBhcnIpO1xuICByZXR1cm4gcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYwYVd4ekxteHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMVZCUjA4c1JVRkJTeXhEUVVGQkxFTkJRVUVzUTBGQlJTeFJRVUZCTEVOQlFVRXNSVUZCUVR0VFFVRkhPenRYUVVOV0xFZEJRVXNzUTBGQlFTeERRVUZCTEVOQlFVVXNVVUZCUVN4RFFVRkJPMFZCUVVjc1QwRkJUeXhEUVVGRExIbENRVUZKTzFOQlFVc3NVMEZCUXl4RFFVRkJMRU5CUVVFN08xbEJRelZDTEVsQlFVc3NRMEZCUVN4RFFVRkJMRU5CUVVVc1VVRkJRU3hEUVVGQk8wVkJRVWNzVDBGQlR5eERRVUZETERCQ1FVRkxPMU5CUVVzc1UwRkJReXhEUVVGQkxFTkJRVUU3TzJOQlN6ZENMRTFCUVU4c1EwRkJRU3hEUVVGQkxFTkJRVVVzVVVGQlFTeERRVUZCTEVOQlFVRTdPenM3T3p0RlFVRlBPMU5CUVZNc1kwRkJTeXhKUVVGSU96dFpRVXN6UWl4SlFVRkxMRU5CUVVFc1EwRkJRU3hSUVVGRkxGRkJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRXNRMEZCUVN4RlFVRkJMRU5CUVVFN1JVRkJZeXhKUVVGSExFTkJRVVVzUTBGQlFTeERRVUZCTEVOQlFVVXNRMEZCVUR0WFFVRmpPMGRCUVVVc1RVRkJRU3hKUVVGUkxFTkJRVVVzUTBGQlFTeERRVUZCTEVOQlFVVXNRMEZCV2p0WFFVRnRRanRIUVVGRk8xZEJRVXM3T3p0WFFVc3ZSQ3hIUVVGSkxFTkJRVUVzUTBGQlFTeFJRVUZGTEZGQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFc1EwRkJRVHRGUVVGWExFbEJRVWNzUTBGQlF5eERRVUZETEUxQlFVOHNRMEZCUVN4RFFVRkJMRU5CUVVVc1EwRkJaRHRYUVVGelFpeERRVUZUTEZsQlFVRXNRMEZCVWl4RFFVRkZMRWRCUVVZc1EwRkJVU3hGUVVGSExFTkJRVVVzUTBGQlFTeERRVUZCTEVOQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVZRc1EwRkJaMElzUTBGQlF5eERRVUZETEVsQlFWTXNRMEZCU2l4RlFVRkJMRU5CUVVrc1EwRkJRU3hEUVVGQkxFTkJRVVU3UjBGQlJUdFhRVUZMT3pzN1pVRkxjRVlzVDBGQlV5eERRVUZCTEVOQlFVRXNRMEZCUlN4UlFVRkJMRU5CUVVFc1IwRkJRVHRUUVVGVExFdEJRVXNzUTBGQlFTeFRRVUZGTEVOQlFVRXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJRVHM3WlVGRmRrTXNUMEZCVVN4RFFVRkJMRU5CUVVFc1EwRkJSeXhSUVVGQkxFTkJRVUVzUlVGQlFUdFRRVUZCTEVWQlFVRXNRMEZCUXl4TFFVRlRMRWxCUVVFN08xZEJSWEpDTEVkQlFVa3NRMEZCUVN4RFFVRkJMRU5CUVVVc1VVRkJRU3hEUVVGQkxFVkJRVUVzUlVGQlFTeEZRVUZCT3p0RlFVTllMRWRCUVVrc1EwRkJRU3hEUVVGQkxFTkJRVVU3UlVGRFRpdzRRMEZCUVRzN1NVRkJTVHRKUVVOR0xFTkJRVVVzUTBGQlFTeERRVUZCTEVOQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVRN1NVRkRUaXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZCTzBsQlExUXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJRVHM3UlVGRFdDeE5RVUZCTEVOQlFVOHNSMEZCVURzN1UwRkxTeXhEUVVGRkxFTkJRVUVzUTBGQlFTeERRVUZGTEZGQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1MwRkJRVHRGUVVGTkxHdENRVUZCTEZGQlFWRTdSVUZEZGtJc1NVRkJSeXhQUVVGUExFZEJRVWtzUTBGQlFTeEhRVUZCTEVOQlFVc3NVVUZCYmtJN1YwRkJaME03UjBGQlNUdFhRVUZMTEV0QlFVc3NRMEZCUXl4alFVRmxMRWRCUVVFN096dFhRVVY2UkN4SFFVRkpMRU5CUVVFc1EwRkJRU3hEUVVGRkxGRkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNTMEZCUVR0RlFVRk5MR3RDUVVGQkxGRkJRVkU3UlVGRGVrSXNTVUZCUnl4UFFVRlBMRWRCUVVrc1EwRkJRU3hIUVVGQkxFTkJRVXNzVVVGQmJrSTdWMEZCWjBNN1IwRkJTVHRYUVVGTExGRkJRVk1zUzBGQlN5eERRVUZETEdsQ1FVRnRRaXhIUVVGQkxFTkJRWHBDSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYWDA9XG5cbiJdfQ==
